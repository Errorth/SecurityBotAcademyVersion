import aiogram.types
from aiogram import Router
from aiogram.filters.command import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData
from db import cur, con

#Variable instead of dispatcher, for import in main file
router = Router()
class NumbersCallbackFactory(CallbackData, prefix="sec"):
    action: str

#Start message handler
@router.message(Command("start"))
async def echo(message: aiogram.types.Message):
    #Trying to add user in database
    try:
        cur.execute("""INSERT INTO users(id, username) VALUES(?,?)""", (message.from_user.id, f'{message.from_user.username}'))
        con.commit()
    except:
        #Case when user already in DB
        pass
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–∞–¥–∂–µ—Ç–∞–º–∏"),
        KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≥–∞–¥–∂–µ—Ç"),
    )
    await message.answer('''
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –±–µ—Ç–∞-—Ç–µ—Å—Ç –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
<b>DEU Security</b>
    ''', parse_mode="HTML", reply_markup=builder.as_markup(resize_keyboard=True))


#Command which help u get list of all your cams
@router.message(Command("get_all_cams"))
async def get_cams(message: aiogram.types.Message):
    try:
        count = 1
        #getting from database
        cur.execute("""SELECT * FROM C WHERE ownerID = ?""", (message.from_user.id,))
        global f
        f = cur.fetchall()
        msg = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —ç—Ç–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É:"
        for i in f:
            msg += f"\n<b>üìπ –ö–∞–º–µ—Ä–∞ {count} (<a href=\"DEUSecurity.com/cams/{i[0]}\"><u>{i[0]}</u></a>)</b>"
            count += 1
        await message.answer(msg, parse_mode="HTML", disable_web_page_preview=True)
        
    except:
        pass


#Handler for message
@router.message()
async def message_chek(message: aiogram.types.Message):
#If/else construct, checking message's text
    if("–î–æ–±–∞–≤–∏—Ç—å –≥–∞–¥–∂–µ—Ç" in message.text):
        await message.answer("""–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä–π —É–∫–∞–∑–∞–Ω –Ω–∞ –µ–≥–æ –±–æ–∫–æ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –ø–æ —Ñ–æ—Ä–º–µ: \"add_device –ö–û–î_–î–ï–í–ê–ô–°–ê-–¢–ò–ü\"
–¢–∏–ø—ã:
1. –ö–∞–º–µ—Ä–∞ - C
2. –°–≤–µ—Ç - L
3. –î–≤–µ—Ä—å - D
4. –û–∫–Ω–æ - W
5. –ß–∞–π–Ω–∏–∫ - T
6. –ü—ã–ª–µ—Å–æ—Å - V                       

–ü—Ä–∏–º–µ—Ä: "add_device C27SJ2-C", –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ö–∞–º–µ—Ä—ã
                             """)
    elif(message.text.split()[0] == "add_device"):
        arg = message.text.split()[1]
        arg = arg.split("-")
        argC = arg[0]
        argT = arg[1]
        messageD = await message.answer("–ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ –∫–æ–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        cur.execute(f"SELECT * FROM {argT} WHERE deviceID = ?", (argC,))
        f = cur.fetchall()
        print(f)
        if f != []:
            if message.from_user.id == f[0][1]:
                await messageD.edit_text("–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            else:
                await messageD.edit_text("–≠—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return
       
        try: 
            await messageD.edit_text("–î–æ–±–∞–≤–ª—è—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            cur.execute(f"""INSERT INTO {argT}(deviceID, ownerID) VALUES(?,?)""", (argC, message.from_user.id))
            con.commit()
            await messageD.edit_text("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        except:
            await messageD.edit_text("STOP")

@router.callback_query(NumbersCallbackFactory.filter())
async def handle_callbacks(callback: aiogram.types.CallbackQuery, data: NumbersCallbackFactory):
    if(data.action == "manage"):
        callback.answer("Hello")
    
    elif("manage" in data.action.split("_")):
        callback.answer("HE")
