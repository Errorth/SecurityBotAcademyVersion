from aiogram import types, F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton,  KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from db import cur, con
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
router = Router()

database = ""



class MyCallback(CallbackData, prefix="my"):
    foo: str
    bar: int

class AddDevice(StatesGroup):
    waiting_for_device_id = State()
    waiting_for_device_type = State()

class StatesMachineDevice():
    @router.message(Command("cancel"))
    async def cancel_state_editing(message: Message, state: FSMContext):
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=s_builder.as_markup(resize_keyboard=True))
    async def device_start(message: types.Message, state: FSMContext):
        
        global avalible_device_types
        avalible_device_types = ["C","D","L","T","L","V","W"]
        keyboard = ReplyKeyboardBuilder()
        for name in avalible_device_types:
            keyboard.add(KeyboardButton(text=f"{name}"))
        await message.answer("""
–ö–∞–º–µ—Ä–∞ - C
–°–≤–µ—Ç - L
–î–≤–µ—Ä—å - D
–û–∫–Ω–æ - W
–ß–∞–π–Ω–∏–∫ - T
–ü—ã–ª–µ—Å–æ—Å - V 
–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–µ–≤–∞–π—Å–∞:""", reply_markup=keyboard.as_markup(resize_keyboard=True))
        await state.set_state(AddDevice.waiting_for_device_type)




@router.message(AddDevice.waiting_for_device_type)
async def food_chosen(message: Message, state: FSMContext):
    if(message.text not in avalible_device_types):
        
        await message.answer("–¢–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        await StatesMachineDevice.device_start(message=message, state=state)
        return
    await state.update_data(chosen_type=message.text)
    await message.answer(
        text="–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å –±–æ–∫–æ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:",
    )
    await state.set_state(AddDevice.waiting_for_device_id)


@router.message(AddDevice.waiting_for_device_id)
async def food_size_chosen(message: Message, state: FSMContext):
    
    user_data = await state.get_data()
    messageD = await message.answer("–ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ –∫–æ–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    dtype = user_data["chosen_type"]
    cur.execute(f"SELECT * FROM {dtype} WHERE deviceID = ?", (message.text,))
    f = cur.fetchall()
    print(f)
    if f != []:
        if message.from_user.id == f[0][1]:
            await messageD.edit_text("–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        else:
            await messageD.edit_text("–≠—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return

    try: 
        await messageD.edit_text("–î–æ–±–∞–≤–ª—è—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        cur.execute(f"""INSERT INTO {dtype}(deviceID, ownerID) VALUES(?,?)""", (message.text, message.from_user.id))
        con.commit()
        await messageD.edit_text("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    except:
        await messageD.edit_text("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É")
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ–≤–∞–π—Å"),
        types.KeyboardButton(text="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–≤–∞–π—Å–∞–º–∏"),
        types.KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    )
    await message.answer(
        text=f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ {dtype} —É—Å—Ç—Ä–æ–π—Å–≤–æ —Å ID {message.text}.\n",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.clear()


class globalHandlers():
    
    @router.message(Command("start"))
    async def start_handler(msg: Message):
        try:
            cur.execute("""INSERT INTO users(id, username) VALUES(?,?)""", (msg.from_user.id, msg.from_user.username))
            con.commit()
        except:
            pass
        global s_builder
        s_builder = ReplyKeyboardBuilder()
        s_builder.row(
        types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ–≤–∞–π—Å"),
        types.KeyboardButton(text="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–≤–∞–π—Å–∞–º–∏"),
        types.KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        )
        await msg.answer('''
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è <b>DEU Security</b>
–°–Ω–∏–∑—É –ø–æ—è–≤–∏–ª–æ—Å—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º, –µ—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –µ–≥–æ –≤–ø–µ—Ä–≤—ã–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–î–æ–±–∞–≤–∏—Ç—å –¥–µ–≤–∞–π—Å"
''', parse_mode="HTML",reply_markup=s_builder.as_markup(resize_keyboard=True))
        
    @router.message(Command("support"))
    async def getSupportContact(message: Message):
            await message.answer("<b>–ê–∫–∫–∞—É–Ω—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @Maykya\n\n–£—á—Ç–∏—Ç–µ, —á—Ç–æ –≤–∞–º <u>–∑–∞–ø—Ä–µ—â–µ–Ω–æ —Å–ø–∞–º–∏—Ç—å</u>, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –≤—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å</b>")

    @router.message(Command("get_website"))
    async def send_websitelink(message: Message):

        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="–¢—ã–∫!", url="http://project7992405.tilda.ws/"))
        await message.answer("<b>–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –≤–∞—Å –Ω–∞ –Ω–∞—à –≤–µ–±-—Å–∞–π—Ç</b>", parse_mode="HTML", reply_markup=builder.as_markup())
    
    @router.message()
    async def check_message(message: Message, state: FSMContext):
        print(message.text)
        if("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–≤–∞–π—Å–∞–º–∏" in message.text):
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
            
            builder = InlineKeyboardBuilder()
            builder.row(
                types.InlineKeyboardButton(
            text="üìπ –ö–∞–º–µ—Ä—ã",
            callback_data=MyCallback(foo="manage_Cameras", bar="42").pack()),
            types.InlineKeyboardButton(
            text="üåû –°–≤–µ—Ç",
            callback_data=MyCallback(foo="manage_Lights", bar="42").pack())
            ),
            builder.row(
                types.InlineKeyboardButton(
            text="üîê –î–≤–µ—Ä–∏",
            callback_data=MyCallback(foo="manage_Doors", bar="42").pack()),
            types.InlineKeyboardButton(
            text="üîå –î—Ä—É–≥–∏–µ –¥–µ–≤–∞–π—Å—ã",
            callback_data=MyCallback(foo="manage_Other devices", bar="42").pack())
            ),
            await message.answer(
                "<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å</b>",
                parse_mode="HTML",
                reply_markup=builder.as_markup()
            )
        elif("–î–æ–±–∞–≤–∏—Ç—å –¥–µ–≤–∞–π—Å" in message.text):
            print("html")
            await StatesMachineDevice.device_start(message=message, state=state)

        elif("–ù–∞—Å—Ç—Ä–æ–π–∫–∏" in message.text):
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text=" üìÑ –°—Ü–µ–Ω–∞—Ä–∏–∏", callback_data="Scenes"))
            builder.add(InlineKeyboardButton(text=" üôã –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data=MyCallback(foo="Support", bar=1).pack()))
            builder.add(InlineKeyboardButton(text=" üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–º–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", callback_data=MyCallback(foo="SecuritySettings", bar=1).pack()))
            builder.adjust(2,2)
            await message.answer("""–í—ã –∑–∞—à–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DEU Security
–°–Ω–∏–∑—É –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –º–µ–Ω—é, –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç-–±–æ—Ç–æ–º                                 
""",parse_mode="HTML",reply_markup=builder.as_markup())
    @router.message(AddDevice.waiting_for_device_id)
    async def dtype(message: Message, state: FSMContext):
        StatesMachineDevice.device_chosen(message=message, state=state)

   
class userHandlers():
    pass


class adminHandlers():
    pass


class callbacks():
    @router.callback_query(MyCallback.filter())
    async def my_callback_foo(query: CallbackQuery, callback_data: MyCallback):
        print(f"Hello {callback_data.foo}")
        if("manage" in callback_data.foo):
            callback_data = callback_data.foo.split("_")
            if(callback_data[1] == "Cameras"):
                try:
                    count = 1
                    #getting from database
                    cur.execute("""SELECT * FROM C WHERE ownerID = ?""", (query.from_user.id,))
                    f = cur.fetchall()
                    print(f"FF: {f}")
                    if f == []:
                        await query.message.answer("–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞–º–µ—Ä—ã")
                        return
                    msg = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —ç—Ç–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É:"
                    builder = InlineKeyboardBuilder()
                    
                    for i in f:
                        builder.add(
                            types.InlineKeyboardButton(
                        text=f"üìπ –ö–∞–º–µ—Ä–∞ {count}",
                        url=f"http://DEUSecurity.com/cams/{i[0]}")
                        )
                        # msg += f"\n<b>üìπ –ö–∞–º–µ—Ä–∞ {count} (<a href=\"DEUSecurity.com/cams/{i[0]}\"><u>{i[0]}</u></a>)</b>"
                        count += 1
                    await query.message.answer(msg, parse_mode="HTML", disable_web_page_preview=True, reply_markup=builder.as_markup())
                except:
                    pass
            elif(callback_data[1] == "Lights"):
                try:
                    count = 1
                    #getting from database
                    cur.execute("""SELECT * FROM L WHERE ownerID = ?""", (query.from_user.id,))
                    f = cur.fetchall()
                    if f == []:
                        await query.message.answer("–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –ª–∞–º–ø—ã")
                        return
                    msg = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∞–º–ø, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —ç—Ç–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É:"
                    builder = InlineKeyboardBuilder()
                    for i in f:
                        builder.add(
                            types.InlineKeyboardButton(
                        text=f"üåû –õ–∞–º–ø–∞ {count}", callback_data="turn_light")
                        
                        )
                        # msg += f"\n<b>üìπ –ö–∞–º–µ—Ä–∞ {count} (<a href=\"DEUSecurity.com/cams/{i[0]}\"><u>{i[0]}</u></a>)</b>"
                        count += 1

                    await query.message.answer(msg, parse_mode="HTML", reply_markup=builder.as_markup())
                except:
                    pass
            elif(callback_data[1] == "Doors"):
                try:
                    count = 1
                    #getting from database
                    cur.execute("""SELECT * FROM D WHERE ownerID = ?""", (query.from_user.id,))
                    f = cur.fetchall()
                    if f == []:
                        await query.message.answer("–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –¥–≤–µ—Ä–∏")
                        return
                    msg = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–≤–µ—Ä–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —ç—Ç–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É:"
                    builder = InlineKeyboardBuilder()
                    for i in f:
                        builder.add(
                            types.InlineKeyboardButton(
                        text=f"üîê –î–≤–µ—Ä—å {count}", callback_data="lock_doors")
                        )
                        # msg += f"\n<b>üìπ –ö–∞–º–µ—Ä–∞ {count} (<a href=\"DEUSecurity.com/cams/{i[0]}\"><u>{i[0]}</u></a>)</b>"
                        count += 1

                    await query.message.answer(msg, parse_mode="HTML", reply_markup=builder.as_markup())
                except:
                    pass
            elif(callback_data[1] == "Other devices"):
                # try:
                    count = 1
                    #getting from database
                    cur.execute("""SELECT * FROM W WHERE ownerID = ?""", (query.from_user.id,))
                    W = cur.fetchall()
                    cur.execute("""SELECT * FROM V WHERE ownerID = ?""", (query.from_user.id,))
                    V = cur.fetchall()
                    cur.execute("""SELECT * FROM T WHERE ownerID = ?""", (query.from_user.id,))
                    T = cur.fetchall()
                    list = [W,V,T]
                    if W == [] and V == [] and T == []:
                        await query.message.answer("–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
                        return
                    msg = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —ç—Ç–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É:"
                    builder = InlineKeyboardBuilder()
                    for x in list:
                        for i in x:
                            if x == W:
                                builder.add(
                                    types.InlineKeyboardButton(
                                text=f"–û–∫–Ω–æ {count}", callback_data=MyCallback(foo="mdevice_window", bar=1).pack())
                                )
                                count += 1
                            elif x == V:
                                builder.add(
                                    types.InlineKeyboardButton(
                                text=f"–ü—ã–ª–µ—Å–æ—Å {count}", callback_data=MyCallback(foo="mdevice_vcleaner", bar=1).pack())
                                )
                                count += 1
                            elif x == T:
                                builder.add(
                                    types.InlineKeyboardButton(
                                text=f"–ß–∞–π–Ω–∏–∫ {count}", callback_data=MyCallback(foo="mdevice_teapot", bar=1).pack())
                                )
                                count += 1
                            
                        count = 1
                    builder.adjust(2,2)

                    await query.message.answer(msg, parse_mode="HTML", reply_markup=builder.as_markup())
                # except:
                #     pass
        elif("add" in callback_data.foo):
            await query.answer(f"You will be able to add device {callback_data.foo}")
        elif("mdevice" in callback_data.foo):
            # if(callback_data.foo.split("_")[1] == "window"):
            device = callback_data.foo.split("_")[1]
            await query.message.answer(f"You will be able to manage {device}s soon...")
        elif(callback_data.foo == "Support"):
            await query.message.answer("<b>–ê–∫–∫–∞—É–Ω—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏: <u>@Maykya</u></b>", parse_mode="HTML")
        elif(callback_data.foo == "Scenes"):
            await query.message.answer("Soon...")
        elif(callback_data.foo == "SecuritySettings"):
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="–í–∫–ª/–í—ã–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞—â–∏—Ç—É", callback_data="pass"))
            builder.add(InlineKeyboardButton(text="–í–∫–ª/–í—ã–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –ò–ò", callback_data="pass"))
            builder.add(InlineKeyboardButton(text="–í–∫–ª/–í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–∞—Ö", callback_data="pass"))
            builder.adjust(1,1)
            await query.message.answer("<b>–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>",parse_mode="HTML", reply_markup=builder.as_markup())
        
